{"version":3,"sources":["asserts/empty.png","services/CommonTypes.ts","pages/Home.tsx","components/MovieTable.tsx","services/MovieSerivice.ts","redux/actions/MovieAction.ts","pages/movie/MovieList.tsx","components/ImgUploader.tsx","components/MovieForm.tsx","pages/movie/AddMovie.tsx","pages/movie/EditMovie.tsx","pages/LayOut.tsx","redux/reducers/MovieReducer.ts","redux/reducers/RootReducer.ts","redux/store.ts","App.tsx","index.tsx"],"names":["module","exports","SwitchType","Component","this","props","onLoad","p","style","padding","width","marginBottom","display","value","condition","key","onChange","e","onKeyChange","target","onPressEnter","onSearch","type","icon","size","marginRight","onClick","title","dataIndex","render","poster","className","src","alt","defaultPoster","filterDropdown","getFilterDropDown","bind","filterIcon","text","join","timeLong","isHot","record","checked","newVal","onSwitchChange","_id","isComing","isClassic","id","to","onConfirm","a","onDelete","message","success","okText","cancelText","total","current","page","pageSize","limit","pagination","rowKey","dataSource","data","columns","getColumns","getPageConfig","handleChange","loading","isLoading","MovieService","movie","axios","post","put","delete","get","params","saveMoviesAction","movies","payload","setLoadingAction","setCondition","deleteAction","changeSwitchAction","fetchMovies","dispatch","getState","curCondition","getMovies","resp","deleteMovie","changeSwitch","edit","connect","state","MovieAction","newState","newPage","MovieTable","showModal","uid","name","url","formData","FormData","append","filename","file","request","Request","action","method","body","fetch","then","json","err","error","accept","listType","fileList","getFileList","customRequest","handleRequest","onRemove","onPreview","setState","getUploadContent","visible","footer","onCancel","tailFormItemLayout","labelCol","span","wrapperCol","areaOptions","label","typeOptions","MovieForm","preventDefault","form","validateFields","errors","getFieldsValue","onSubmit","result","history","push","getFieldDecorator","handleSubmit","Item","rules","required","Group","options","min","step","valuePropName","initialValue","TextArea","offset","htmlType","withRouter","Form","create","mapPropsToFields","obj","createFormField","console","log","getDefaultField","add","undefined","getMovieById","match","Header","Layout","Sider","Content","_LayOut","mode","theme","path","component","Home","exact","MovieList","AddMovie","EditMovie","defaultState","totalPage","saveMovie","Math","ceil","setLoading","filter","t","find","d","newMovie","newData","map","RootReducer","combineReducers","store","createStore","applyMiddleware","thunk","logger","App","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.0c15e949.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/empty.a51ffe1b.png\";","export interface IResponseError{\n    err: string,\n    data: null\n}\nexport interface IResponseData<T>{\n    err: \"\",\n    data: T\n}\nexport interface IResponsePageData<T>{\n    err: \"\",\n    total: number,\n    data: T[]\n}\nexport interface ISearchCondition{\n    page?:number,\n    limit?:number,\n    key?:string\n}\nexport enum SwitchType{\n    isHot=\"isHot\",\n    isComing= \"isComing\",\n    isClassic=\"isClassic\"\n}","import React, { Component } from 'react'\n\nexport default class extends Component {\n    render() {\n        return (\n            <h1>\n              欢迎使用电影管理页  \n            </h1>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { IMovieState } from '../redux/reducers/MovieReducer'\nimport { Table, Switch, Button, message, Popconfirm, Icon, Input } from 'antd'\nimport { ColumnProps, PaginationConfig } from 'antd/lib/table'\nimport { IMovie } from '../services/MovieSerivice'\nimport defaultPoster from \"../asserts/empty.png\"\nimport { SwitchType } from '../services/CommonTypes'\nimport { NavLink } from 'react-router-dom'\nexport interface IMovieTabelEvent {\n    onLoad: () => void,\n    onSwitchChange: (type: SwitchType, newState: boolean, id: string) => void,\n    onDelete: (id: string) => Promise<void>,\n    onChange: (newPage: number) => void,\n    onKeyChange: (key: string) => void,\n    onSearch: () => void\n}\n\nexport default class extends Component<IMovieTabelEvent & IMovieState> {\n    componentDidMount() {\n        if (this.props.onLoad) {\n            this.props.onLoad();\n        }\n    }\n    private getFilterDropDown(p: Object) {\n        return (<div style={{ padding: 8 }}>\n            <Input\n                style={{ width: 188, marginBottom: 8, display: 'block' }}\n                value={this.props.condition.key}\n                onChange={e => this.props.onKeyChange(e.target.value)}\n                onPressEnter={this.props.onSearch}\n            />\n            <Button\n                type=\"primary\"\n                icon=\"search\"\n                size=\"small\"\n                style={{ width: 90, marginRight: 8 }}\n                onClick={this.props.onSearch}\n            >\n                搜索\n            </Button>\n            <Button \n                size=\"small\" \n                style={{ width: 90 }}\n                onClick={()=>{\n                    this.props.onKeyChange(\"\");\n                    this.props.onSearch();\n                }}\n            >\n                重置\n            </Button>\n        </div>)\n    }\n    private getColumns(): ColumnProps<IMovie>[] {\n        return [\n            {\n                title: \"封面\",\n                dataIndex: \"poster\",\n                render: (poster) => {\n                    if (poster) {\n                        return <img className=\"tablePoster\" src={poster} alt=\"\" />;\n                    } else {\n                        return <img className=\"tablePoster\" src={defaultPoster} alt=\"\" />\n                    }\n                }\n            },\n            {\n                title: \"名称\",\n                dataIndex: \"name\",\n                filterDropdown: this.getFilterDropDown.bind(this),\n                filterIcon: <Icon type=\"search\"></Icon>\n            },\n            {\n                title: \"地区\",\n                dataIndex: \"areas\",\n                render: (text: string[]) => {\n                    return text.join(\", \");\n                }\n            },\n            {\n                title: \"类型\",\n                dataIndex: \"types\",\n                render: (text: string[]) => {\n                    return text.join(\", \");\n                }\n            },\n            {\n                title: \"时长\",\n                dataIndex: \"timeLong\",\n                render: (timeLong) => {\n                    return timeLong + \"分钟\";\n                }\n            },\n            {\n                title: \"正在热映\",\n                dataIndex: \"isHot\",\n                render: (isHot, record) => {\n                    return <Switch checked={isHot} onChange={(newVal) => {\n                        this.props.onSwitchChange(SwitchType.isHot, newVal, record._id!)\n                    }} />\n                }\n            },\n            {\n                title: \"即将上映\",\n                dataIndex: \"isComing\",\n                render: (isComing, record) => {\n                    return <Switch checked={isComing} onChange={(newVal) => {\n                        this.props.onSwitchChange(SwitchType.isComing, newVal, record._id!)\n                    }} />\n                }\n            },\n            {\n                title: \"经典影片\",\n                dataIndex: \"isClassic\",\n                render: (isClassic, record) => {\n                    return <Switch checked={isClassic} onChange={(newVal) => {\n                        this.props.onSwitchChange(SwitchType.isClassic, newVal, record._id!)\n                    }} />\n                }\n            },\n            {\n                title: \"编辑\",\n                dataIndex: \"_id\",\n                render: (id) => {\n                    return (<div>\n                        <NavLink to={\"/movie/edit/\" + id}>\n                            <Button type=\"primary\" size=\"small\">编辑</Button>\n                        </NavLink>\n                        <Popconfirm\n                            title=\"Are you sure delete this task?\"\n                            onConfirm={async () => {\n                                await this.props.onDelete(id);\n                                message.success('删除成功');\n                            }}\n                            okText=\"确定\"\n                            cancelText=\"取消\"\n                        >\n                            <Button type=\"danger\" size=\"small\">删除</Button>\n                        </Popconfirm>\n                    </div>)\n                }\n            }\n        ];\n    }\n    private getPageConfig(): PaginationConfig | false {\n        if (this.props.total === 0) {\n            return false;\n        }\n        return {\n            current: this.props.condition.page,\n            pageSize: this.props.condition.limit,\n            total: this.props.total\n        }\n    }\n    private handleChange(pagination: PaginationConfig) {\n        this.props.onChange(pagination.current!)\n    }\n    render() {\n        return (\n            <div>\n                <Table\n                    rowKey=\"_id\"\n                    dataSource={this.props.data}\n                    columns={this.getColumns()}\n                    pagination={this.getPageConfig()}\n                    onChange={this.handleChange.bind(this)}\n                    loading={this.props.isLoading}\n                ></Table>\n            </div>\n        )\n    }\n}\n","import axios from \"axios\"\nimport { IResponseError, IResponseData, ISearchCondition, IResponsePageData } from \"./CommonTypes\";\nexport interface IMovie {\n    _id?: string;\n    name: string;\n    types: string[];\n    areas: string[];\n    timeLong: number;\n    isHot: boolean;\n    isComing: boolean;\n    isClassic: boolean;\n    description?: string;\n    poster?: string;\n}\nexport class MovieService {\n    public static async add(movie: IMovie):Promise<IResponseError|IResponseData<IMovie>> {\n        const { data } = await axios.post(\"/api/movie\", movie);\n        return data;\n    }\n    public static async edit(id: string, movie: Partial<IMovie>):Promise<IResponseError|IResponseData<IMovie>> {\n        const { data } = await axios.put(\"/api/movie/\"+id, movie);\n        return data;\n    }\n    public static async delete(id: string):Promise<IResponseError|IResponseData<true>> {\n        const { data } = await axios.delete(\"/api/movie/\"+id);\n        return data;\n    }\n    public static async getMovieById(id:string):Promise<IResponseData<IMovie|null>>{\n        const {data} = await axios.get(\"/api/movie/\"+id);\n        return data;\n    }\n    public static async getMovies(condition: ISearchCondition):Promise<IResponsePageData<IMovie>>{\n        const {data} = await axios.get(\"/api/movie\", {\n            params: condition\n        })\n        return data;\n    }\n}","import { IAction } from \"./ActionTypes\"\nimport { IMovie, MovieService } from \"../../services/MovieSerivice\"\nimport { ISearchCondition, SwitchType } from \"../../services/CommonTypes\"\nimport { ThunkAction } from \"redux-thunk\"\nimport { IRootState } from \"../reducers/RootReducer\"\nexport type SaveMoviesAction = IAction<\"movie_save\", {\n    movies: IMovie[],\n    total: number\n}>\n\nfunction saveMoviesAction(movies: IMovie[], total: number):SaveMoviesAction{\n    return {\n        type: \"movie_save\",\n        payload: {\n            movies,\n            total\n        }\n    }\n}\n\nexport type SetLoadingAction = IAction<\"movie_setLoading\", boolean>\n\nfunction setLoadingAction(isLoading: boolean): SetLoadingAction{\n    return {\n        type: \"movie_setLoading\",\n        payload: isLoading\n    }\n}\n\nexport type SetCondition = IAction<\"movie_setCondition\",ISearchCondition>\n\nfunction setCondition(condition: ISearchCondition): SetCondition{\n    return {\n        type: \"movie_setCondition\",\n        payload: condition\n    }\n}\n\nexport type DeleteAction = IAction<\"movie_delete\", string>\n\nfunction deleteAction(id: string): DeleteAction{\n    return {\n        type: \"movie_delete\",\n        payload: id\n    }\n}\n\nfunction fetchMovies(condition:ISearchCondition): ThunkAction<Promise<void>, IRootState, any, MovieActions>{\n    return async (dispatch, getState)=>{\n        // 设置加载状态\n        dispatch(setLoadingAction(true));\n        // 设置条件\n        dispatch(setCondition(condition));\n        // 获取服务器数据\n        const curCondition = getState().movie.condition;\n        const resp = await MovieService.getMovies(curCondition);\n        // 更改仓库的数据\n        dispatch(saveMoviesAction(resp.data, resp.total))\n        // 关闭加载状态\n        dispatch(setLoadingAction(false));\n    }\n}\n\nfunction deleteMovie(id: string): ThunkAction<Promise<void>, IRootState, any, MovieActions>{\n    return async (dispatch, getState)=>{\n        // 设置加载状态\n        dispatch(setLoadingAction(true));\n        // 本地仓库数据删除\n        dispatch(deleteAction(id));\n        // 处理服务器数据\n        await MovieService.delete(id);\n        // 关闭加载状态\n        dispatch(setLoadingAction(false));\n    }\n}\n\nexport type MovieChangeSwitchAction = IAction<\"movie_switch\", {\n    type: SwitchType, \n    newVal: boolean, \n    id: string\n}>\n\n\nfunction changeSwitchAction(type: SwitchType, newVal: boolean, id: string):MovieChangeSwitchAction{\n    return {\n        type: \"movie_switch\",\n        payload: {\n            type,\n            newVal,\n            id\n        }\n    }\n}\n\nfunction changeSwitch(type: SwitchType, newVal: boolean, id: string): ThunkAction<Promise<void>, IRootState, any, MovieActions>{\n    return async (dispatch, getState)=>{\n        dispatch(changeSwitchAction(type, newVal, id));\n        await MovieService.edit(id, {\n            [type]: newVal\n        })\n    }\n}\n\nexport type MovieActions = SaveMoviesAction | SetLoadingAction | SetCondition | DeleteAction | MovieChangeSwitchAction;\n\nexport default {\n    saveMoviesAction,\n    setLoadingAction,\n    setCondition,\n    deleteAction,\n    fetchMovies,\n    deleteMovie,\n    changeSwitchAction,\n    changeSwitch\n}","import MovieTable, { IMovieTabelEvent } from '../../components/MovieTable'\nimport { connect } from \"react-redux\"\nimport { IRootState } from '../../redux/reducers/RootReducer'\nimport MovieAction from '../../redux/actions/MovieAction'\nfunction mapStateToProps(state: IRootState) {\n    return state.movie\n}\nfunction mapDispatchToProps(dispatch: any): IMovieTabelEvent {\n    return {\n        onLoad() {\n            dispatch(MovieAction.fetchMovies({\n                page: 1,\n                limit: 10,\n                key: \"\"\n            }))\n        },\n        onSwitchChange(type, newState, id){\n            dispatch(MovieAction.changeSwitch(type, newState, id))\n        },\n        async onDelete(id){\n            await dispatch(MovieAction.deleteMovie(id));\n        },\n        onChange(newPage){\n            dispatch(MovieAction.fetchMovies({\n                page: newPage\n            }))\n        },\n        onKeyChange(key){\n            dispatch(MovieAction.setCondition({\n                key\n            }))\n        },\n        onSearch(){\n            dispatch(MovieAction.fetchMovies({\n                page: 1\n            }))\n        }\n    }\n}\nexport default connect(mapStateToProps, mapDispatchToProps)(MovieTable);\n","import React, { Component } from 'react'\nimport { Upload, Icon, message, Modal } from 'antd'\nimport { UploadFile } from 'antd/lib/upload/interface';\nimport { IResponseData, IResponseError } from '../services/CommonTypes';\n\ninterface IImgUploadProps {\n    value?: string,\n    onChange?: (imgUrl: string) => void\n}\ninterface IImgModal {\n    showModal: boolean\n}\n\nexport default class extends Component<IImgUploadProps> {\n    state: IImgModal = {\n        showModal: false\n    }\n    private getUploadContent() {\n        if (this.props.value) {\n            return null\n        }\n        else {\n            return <div>\n                <Icon type=\"plus\" />\n                <div className=\"ant-upload-text\">点击上传</div>\n            </div>\n        }\n    }\n    private getFileList(): UploadFile[] {\n        if (this.props.value) {\n            return [{\n                uid: this.props.value,\n                name: this.props.value,\n                url: this.props.value\n            }]\n        } else {\n            return []\n        }\n    }\n    private async handleRequest(p: any) {\n        let formData = new FormData();\n        formData.append(p.filename, p.file);\n        const request = new Request(p.action, {\n            method: \"post\",\n            body: formData\n        })\n        const resp: IResponseData<string> | IResponseError = await fetch(request).then(resp => resp.json());\n        if (resp.err) {\n            message.error(\"上传失败\");\n        } else {\n            if (this.props.onChange) {\n                this.props.onChange(resp.data!);\n            }\n        }\n    }\n    render() {\n        return (\n            <div>\n                <Upload\n                    action=\"/api/upload\"\n                    name=\"imgfile\"\n                    accept=\".jpg,.png,.jif\"\n                    listType=\"picture-card\"\n                    fileList={this.getFileList()}\n                    customRequest={this.handleRequest.bind(this)}\n                    onRemove={() => {\n                        if (this.props.onChange) {\n                            this.props.onChange(\"\");\n                        }\n                    }}\n                    onPreview={() => {\n                        this.setState({\n                            showModal: true\n                        })\n                    }}\n                >\n                    {this.getUploadContent()}\n                </Upload>\n                <Modal visible={this.state.showModal} footer={null} onCancel={() => {\n                    this.setState({\n                        showModal: false\n                    })\n                }}>\n                    <img src={this.props.value} style={{ width: '100%' }} alt=\"\" />\n                </Modal>\n            </div>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { Form, Input, Button, Checkbox, InputNumber, Switch, message } from 'antd'\nimport { WrappedFormUtils } from 'antd/lib/form/Form';\nimport { IMovie } from '../services/MovieSerivice';\nimport ImgUploader from './ImgUploader';\nimport { RouteComponentProps, withRouter } from 'react-router';\n\ninterface IFormProps extends RouteComponentProps {\n    movie?: IMovie,\n    form: WrappedFormUtils<any>,\n    onSubmit: (movie: IMovie)=>Promise<string>\n}\n\nconst tailFormItemLayout = {\n    labelCol: {\n        span: 6\n    },\n    wrapperCol: {\n        span: 18\n    },\n};\n\nconst areaOptions: { label: string, value: string }[] = [\n    { label: \"中国大陆\", value: \"中国大陆\" },\n    { label: \"美国\", value: \"美国\" },\n    { label: \"中国台湾\", value: \"中国台湾\" },\n    { label: \"中国香港\", value: \"中国香港\" }\n]\n\nconst typeOptions: { label: string, value: string }[] = [\n    { label: \"喜剧\", value: \"喜剧\" },\n    { label: \"动作片\", value: \"动作片\" },\n    { label: \"动漫\", value: \"动漫\" },\n    { label: \"爱情\", value: \"爱情\" }\n]\nclass MovieForm extends Component<IFormProps> {\n\n    private handleSubmit(e: React.FormEvent<HTMLFormElement>) {\n        e.preventDefault();\n        this.props.form.validateFields(async errors => {\n            if (!errors) {\n                const formData = this.props.form.getFieldsValue();\n                const result = await this.props.onSubmit(formData as IMovie);\n                if(result){\n                    message.error(result)\n                }else{\n                    message.success(\"处理成功\", 1, ()=>{\n                        this.props.history.push(\"/movie\")\n                    })\n                }\n            }\n        })\n    }\n    render() {\n        const { getFieldDecorator } = this.props.form;\n        return (\n            <Form onSubmit={this.handleSubmit.bind(this)} {...tailFormItemLayout} style={{ width: \"400px\" }}>\n                <Form.Item label=\"电影名称\">\n                    {getFieldDecorator<IMovie>(\"name\", {\n                        rules: [{ required: true, message: \"请填写电影名称\" }]\n                    })(<Input></Input>)}\n                </Form.Item>\n                <Form.Item\n                    label=\"封面图\"\n                >\n                    {getFieldDecorator<IMovie>(\"poster\")(\n                        <ImgUploader></ImgUploader>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"上映地区\"\n                >\n                    {getFieldDecorator<IMovie>(\"areas\", {\n                        rules: [{ required: true, message: \"请选择地区\" }]\n                    })(\n                        <Checkbox.Group options={areaOptions}></Checkbox.Group>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"电影类型\"\n                >\n                    {getFieldDecorator<IMovie>(\"types\", {\n                        rules: [{ required: true, message: \"请选择类型\" }]\n                    })(\n                        <Checkbox.Group options={typeOptions}></Checkbox.Group>\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"时长(分钟)\"\n                >\n                    {getFieldDecorator<IMovie>(\"timeLong\", {\n                        rules: [{ required: true, message: \"请填写时长\" }]\n                    })(\n                        <InputNumber min={1} step={10} />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"正在热映\"\n                >\n                    {getFieldDecorator<IMovie>(\"isHot\", {\n                        valuePropName: 'checked',\n                        initialValue: false\n                    })(\n                        <Switch />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"即将上映\"\n                >\n                {getFieldDecorator<IMovie>(\"isComing\", {\n                    valuePropName: 'checked',\n                    initialValue: false\n                })(\n                        <Switch />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"经典影片\"\n                >\n                    {getFieldDecorator<IMovie>(\"isClassic\", {\n                        valuePropName: 'checked',\n                        initialValue: false\n                    })(\n                        <Switch />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    label=\"描述\"\n                >\n                    {getFieldDecorator<IMovie>(\"description\")(\n                        <Input.TextArea />\n                    )}\n                </Form.Item>\n                <Form.Item\n                    labelCol={{ span: 0 }}\n                    wrapperCol={{ offset: 6 }}\n                >\n                    <Button type=\"primary\" htmlType=\"submit\">提交</Button>\n                </Form.Item>\n            </Form>\n        )\n    }\n}\ntype MovieFields = {\n    [k in Exclude<keyof IMovie, \"_id\">]: any\n}\ninterface IMovieKey extends IMovie{\n    [key: string]: any\n}\nfunction getDefaultField(movie:IMovieKey):MovieFields{\n    const obj: any = {};\n    for (const key in movie) {\n        obj[key] = Form.createFormField({\n            value: movie[key] as any\n        })\n    }\n    console.log(obj)\n    return obj;\n}\n\nexport default withRouter(Form.create<IFormProps>({\n    mapPropsToFields: props=>{\n        if(props.movie){\n            return getDefaultField(props.movie)\n        }\n    }\n})(MovieForm));","import React, { Component } from 'react'\nimport MovieForm from '../../components/MovieForm'\nimport { MovieService } from '../../services/MovieSerivice'\n\nexport default class extends Component{\n    render() {\n        return (\n            <MovieForm onSubmit={async movie=>{\n                const resp = await MovieService.add(movie);\n                if(resp.data){\n                    return \"\";\n                }else{\n                    return resp.err\n                }\n            }}></MovieForm>\n        )\n    }\n}\n","import React, { Component } from 'react'\nimport { RouteComponentProps } from 'react-router'\nimport ImgUploader from '../../components/ImgUploader'\nimport MovieForm from '../../components/MovieForm';\nimport { MovieService, IMovie } from '../../services/MovieSerivice';\ninterface IParams {\n    id: string\n}\ninterface IState {\n    movie?: IMovie\n}\nexport default class extends Component<RouteComponentProps<IParams>, IState>  {\n    state: IState = {\n        movie: undefined\n    }\n    async componentDidMount(){\n        const resp = await MovieService.getMovieById(this.props.match.params.id);\n        if(resp.data){\n            this.setState({\n                movie: resp.data\n            })\n        }\n    }\n    render() {\n        return (\n            <MovieForm\n                movie={this.state.movie}\n                onSubmit={async movie => {\n                    const resp = await MovieService.edit(this.props.match.params.id, movie);\n                    if (resp.data) {\n                        return \"\";\n                    } else {\n                        return resp.err\n                    }\n                }}></MovieForm>\n        )\n    }\n}\n","import React from 'react'\nimport { Route } from \"react-router\"\nimport { NavLink } from \"react-router-dom\"\nimport Home from './Home'\nimport MovieList from './movie/MovieList'\nimport AddMovie from './movie/AddMovie'\nimport EditMovie from './movie/EditMovie'\nimport { Layout, Menu } from 'antd';\n\nconst { Header, Sider, Content } = Layout;\nexport default function _LayOut() {\n    return (\n        <div className=\"container\">\n            <Layout>\n                <Header className=\"header\">\n                    <NavLink to=\"/\">猫眼电影管理系统</NavLink>\n                </Header>\n                <Layout>\n                    <Sider>\n                        <Menu\n                            mode=\"inline\"\n                            theme=\"dark\"\n                        >\n                            <Menu.Item key=\"1\">\n                                <NavLink to=\"/movie\">电影列表</NavLink>\n                            </Menu.Item>\n                            <Menu.Item key=\"2\">\n                                <NavLink to=\"/movie/add\">添加电影</NavLink>\n                            </Menu.Item>\n                        </Menu>\n                    </Sider>\n                    <Content className=\"main\">\n                        <Route path=\"/\" component={Home} exact={true}></Route>\n                        <Route path=\"/movie\" component={MovieList} exact={true}></Route>\n                        <Route path=\"/movie/add\" component={AddMovie} exact={true}></Route>\n                        <Route path=\"/movie/edit/:id\" component={EditMovie} exact={true}></Route>\n                    </Content>\n                </Layout>\n            </Layout>\n        </div>\n    )\n}\n","import { IMovie } from \"../../services/MovieSerivice\"\nimport { ISearchCondition } from \"../../services/CommonTypes\"\nimport { MovieActions, SaveMoviesAction, SetCondition, SetLoadingAction, DeleteAction, MovieChangeSwitchAction } from \"../actions/MovieAction\"\nimport { Reducer } from \"react\"\nexport type IMOvieCondition = Required<ISearchCondition>\n\nexport interface IMovieState {\n    /**\n     * 电影数组\n     */\n    data: IMovie[],\n    /**\n     * 查询条件\n     */\n    condition: IMOvieCondition,\n    /**\n     * 总记录数\n     */\n    total: number,\n    /**\n     * 是否正在加载\n     */\n    isLoading: boolean,\n    /**\n     * 总页数\n     */\n    totalPage: number\n}\n\nconst defaultState: IMovieState = {\n    data: [],\n    condition: {\n        page: 1,\n        limit: 10,\n        key: \"\"\n    },\n    total: 0,\n    isLoading: false,\n    totalPage: 0\n}\n\nconst saveMovie: Reducer<IMovieState, SaveMoviesAction> = function (state, action) {\n    return {\n        ...state,\n        data: action.payload.movies,\n        total: action.payload.total,\n        totalPage: Math.ceil(action.payload.total/state.condition.limit)\n    }\n}\n\nconst setCondition: Reducer<IMovieState, SetCondition> = function (state, action) {\n    const newState =  {\n        ...state,\n        condition: {\n            ...state.condition,\n            ...action.payload\n        }\n    }\n    newState.totalPage = Math.ceil(newState.total / newState.condition.limit)\n    return newState;\n}\n\nconst setLoading: Reducer<IMovieState, SetLoadingAction> = function (state, action) {\n    return {\n        ...state,\n        isLoading: action.payload\n    }\n}\n\nconst deleteMovie: Reducer<IMovieState, DeleteAction> = function (state, action) {\n    return {\n        ...state,\n        data: state.data.filter(t => action.payload !== t._id),\n        total: state.total - 1,\n        totalPage: Math.ceil(state.total - 1/state.condition.limit)\n    }\n}\n\nconst changeSwitch: Reducer<IMovieState, MovieChangeSwitchAction> = function(state, action){\n    const movie = state.data.find(d=>d._id === action.payload.id);\n    if(!movie){\n        return state;\n    }\n    const newMovie = {...movie};\n    newMovie[action.payload.type] = action.payload.newVal;\n    const newData = state.data.map(d => {\n        if(d._id === action.payload.id){\n            return newMovie\n        }\n        return d\n    })\n\n    return {\n        ...state,\n        data: newData\n    }\n}\n\nexport default function (state: IMovieState = defaultState, action: MovieActions) {\n    switch (action.type) {\n        case \"movie_save\":\n            return saveMovie(state, action);\n        case \"movie_delete\":\n            return deleteMovie(state, action);\n        case \"movie_setCondition\":\n            return setCondition(state, action);\n        case \"movie_setLoading\":\n            return setLoading(state, action);\n        case \"movie_switch\":\n            return changeSwitch(state, action);\n        default:\n            return state\n    }\n}","import { combineReducers } from \"redux\"\nimport movie, { IMovieState } from \"./MovieReducer\"\n\n/**\n * 整个网站的根状态\n */\nexport interface IRootState{\n    movie: IMovieState\n}\n\nexport const RootReducer = combineReducers({\n    movie\n})","import { createStore, applyMiddleware } from \"redux\";\nimport { RootReducer, IRootState } from \"./reducers/RootReducer\";\nimport logger from \"redux-logger\";\nimport thunk, { ThunkMiddleware } from \"redux-thunk\";\n\nexport const store = createStore(\n    RootReducer, \n    applyMiddleware(thunk as ThunkMiddleware<IRootState> ,logger)\n);","import React from 'react';\nimport { BrowserRouter, Route } from 'react-router-dom';\nimport _LayOut from './pages/LayOut';\nimport { Provider } from 'react-redux';\nimport { store } from './redux/store';\n\nconst App: React.FC = () => {\n  return (\n    <Provider store={store}>\n      <BrowserRouter>\n        <Route path=\"/\" component={_LayOut}></Route>\n      </BrowserRouter>\n    </Provider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport \"antd/dist/antd.css\"\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}